// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model College {
    id            Int      @id @default(autoincrement())
    name          String   @unique
    dgesID        String   @unique
    city          String
    totalStudents Int
    majors        Major[]
    reviews       Review[]
}

model CsvdataUni {
    id       Int    @id @default(autoincrement())
    name     String
    locale   String
    students Int
    typeof   String
}

model Review {
    id              Int      @id @default(autoincrement())
    userId          Int
    collegeId       Int
    description     String
    overallQuality  Int
    location        Int
    infrastructure  Int
    education       Int
    extraActivities Int
    cons            String
    pros            String
    createdAt       DateTime @default(now())
    user            User     @relation(fields: [userId], references: [id])
    college         College  @relation(fields: [collegeId], references: [id])
}

model Account {
    id                 Int     @id @default(autoincrement())
    userId             Int     @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           Int      @id @default(autoincrement())
    userId       Int      @map("user_id")
    sessionToken String   @unique @map("session_token")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Major {
    id          Int           @id @default(autoincrement())
    name        String        @unique
    seats       Int
    collegeId   Int
    dgesID      String        @unique
    cycle       String
    college     College       @relation(fields: [collegeId], references: [id])
    majorReview MajorReview[]
}

model MajorReview {
    id             Int      @id @default(autoincrement())
    userId         Int
    majorId        Int
    description    String
    overallQuality Int
    education      Int
    lifeBalance    Int
    cons           String
    pros           String
    createdAt      DateTime @default(now())
    user           User     @relation(fields: [userId], references: [id])
    major          Major    @relation(fields: [majorId], references: [id])
}

model User {
    id            Int           @id @default(autoincrement())
    username      String        @unique @default(cuid())
    name          String?
    role          String        @default("USER")
    email         String?       @unique
    emailVerified DateTime?     @map("email_verified")
    image         String?
    createdAt     DateTime      @default(now()) @map(name: "created_at")
    updatedAt     DateTime      @updatedAt @map(name: "updated_at")
    reviews       Review[]
    accounts      Account[]
    sessions      Session[]
    MajorReview   MajorReview[]

    @@map(name: "users")
}
